# You just need to declare a variable last_generation which is the generation in which the map changes




#---------------main loop-------------------------
while True:
    
    #exit
    for event in pygame.event.get():
        if event.type == QUIT:
            
            generations = np.linspace(1, len(avg_fitness),  len(avg_fitness))
            plt.plot(generations, avg_fitness, '-')
            plt.xlabel('Generations')
            plt.ylabel('Fitness')
            plt.show()

            plt.plot(generations, max_gen_dist_list, '-')
            plt.xlabel('Generations')
            plt.ylabel('Max Genetic distance')
            plt.show()

            pygame.quit()
            sys.exit()

    displaysurface.fill(green)
    displaysurface.blit(race_track,(0,0))
    
    for i in range(population_n):
        population[i].actualize()
        population[i].calcFitness()
    for entity in all_sprites:
        displaysurface.blit(entity.surf, entity.rect)

    pygame.display.update()
    FramePerSec.tick(FPS)

    count += 1
    if (count == (150 + generation_n * 35) or count == 16000):

        if generation_n == last_generation:

            race_track = pygame.image.load("map1.jpg")
            
            road_im = np.array(Image.open("map1.jpg"))
            road = np.empty((WIDTH, HEIGHT))
            for i in range(WIDTH):
                for j in range(HEIGHT):
                    # road_im is indexed [j,i], while road is indexed [i,j], they are transposed
                    if road_im[j,i,0] == 150 and road_im[j,i,1] == 150 and road_im[j,i,2] == 150:
                        road[i][j] = 1
                    else:
                        road[i][j] = -1
        
            # initial conditions
            # posi =  np.array([125,465] )
            posi =  np.array([855,535] )
            veli =  np.array([0,0] )
            anglei = np.deg2rad(-90)

            # you have to redefine checkpoints for new map
            check_point_radius = 60
            checkpoints = np.array([np.array([945,415]),np.array([845,460]),np.array([710,450]),np.array([560,390]),np.array([405,425]),np.array([225,420]),np.array([195,225]),np.array([320,140]),np.array([505,105]),np.array([670,120]),np.array([850,190]),np.array([990,310])])
            checkpoints_num = len(checkpoints)
            checkpoint_dists = np.zeros(checkpoints_num)
            checkpoint_rewards = np.zeros(checkpoints_num)

            for i in range(checkpoints_num):
                checkpoint_dists[i] = np.linalg.norm(checkpoints[i] - checkpoints[(i+1) % checkpoints_num]) 
                checkpoint_rewards[i] = checkpoint_rewards[i-1] + checkpoint_dists[i-1] 

            dt = 0.05 # makes them drive slower, which helps them not go out of the road. Also makes the simulation slower (nice so we can see it better)
            # maybe modify here the FPS


        print(generation_n)

        # generation_laps.append(total_laps)
        # print(total_laps)
        total_laps = 0
        max_genetic_distance(population)
        population = give_birth(selection(population))
        displaysurface.fill(green)
        displaysurface.blit(race_track,(0,0))
        
        for entity in all_sprites:
            entity.kill()
        for i in range(population_n):
            all_sprites.add(population[i])
        FramePerSec.tick(1)

        generation_n += 1
        count = 0
